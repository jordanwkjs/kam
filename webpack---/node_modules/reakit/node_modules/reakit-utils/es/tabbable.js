import {
    closest
} from './closest.js';

var selector = "input:not([type='hidden']):not([disabled]), select:not([disabled]), " + "textarea:not([disabled]), a[href], button:not([disabled]), [tabindex], " + "iframe, object, embed, area[href], audio[controls], video[controls], " + "[contenteditable]:not([contenteditable='false'])";

function isVisible(element) {
    return element.offsetWidth > 0 || element.offsetHeight > 0 || element.getClientRects().length > 0;
}

function hasNegativeTabIndex(element) {
    var tabIndex = parseInt(element.getAttribute("tabIndex") || "0", 10);
    return tabIndex < 0;
}

function isFocusable(element) {
    return element.matches(selector) && isVisible(element);
}

function isTabbable(element) {
    return isFocusable(element) && !hasNegativeTabIndex(element);
}

function getAllFocusableIn(container) {
    var allFocusable = Array.from(container.querySelectorAll(selector));
    allFocusable.unshift(container);
    return allFocusable.filter(isFocusable);
}

function getFirstFocusableIn(container) {
    var allFocusable = getAllFocusableIn(container);
    return allFocusable.length ? allFocusable[0] : null;
}

function getAllTabbableIn(container, fallbackToFocusable) {
    var allFocusable = Array.from(container.querySelectorAll(selector));
    var allTabbable = allFocusable.filter(isTabbable);

    if (isTabbable(container)) {
        allTabbable.unshift(container);
    }

    if (!allTabbable.length && fallbackToFocusable) {
        return allFocusable;
    }

    return allTabbable;
}

function getFirstTabbableIn(container, fallbackToFocusable) {
    var _getAllTabbableIn = getAllTabbableIn(container, fallbackToFocusable),
        first = _getAllTabbableIn[0];

    return first || null;
}

function getLastTabbableIn(container, fallbackToFocusable) {
    var allTabbable = getAllTabbableIn(container, fallbackToFocusable);
    return allTabbable[allTabbable.length - 1] || null;
}

function getNextTabbableIn(container, fallbackToFocusable) {
    var _ref = container.ownerDocument || document,
        activeElement = _ref.activeElement;

    var allFocusable = getAllFocusableIn(container);
    var index = allFocusable.indexOf(activeElement);
    var slice = allFocusable.slice(index + 1);
    return slice.find(isTabbable) || allFocusable.find(isTabbable) || (fallbackToFocusable ? slice[0] : null);
}

function getPreviousTabbableIn(container, fallbackToFocusable) {
    var _ref2 = container.ownerDocument || document,
        activeElement = _ref2.activeElement;

    var allFocusable = getAllFocusableIn(container).reverse();
    var index = allFocusable.indexOf(activeElement);
    var slice = allFocusable.slice(index + 1);
    return slice.find(isTabbable) || allFocusable.find(isTabbable) || (fallbackToFocusable ? slice[0] : null);
}

function getClosestFocusable(element) {
    var container = null;

    do {
        container = closest(element, selector);
    } while (container && !isFocusable(container));

    return container;
}

function defaultIsActive(element) {
    var _ref3 = element.ownerDocument || document,
        activeElement = _ref3.activeElement;

    return activeElement === element;
}

function ensureFocus(element, _temp) {
    var _ref4 = _temp === void 0 ? {} : _temp,
        _ref4$isActive = _ref4.isActive,
        isActive = _ref4$isActive === void 0 ? defaultIsActive : _ref4$isActive,
        preventScroll = _ref4.preventScroll;

    if (isActive(element)) return -1;
    element.focus({
        preventScroll: preventScroll
    });
    if (isActive(element)) return -1;
    return requestAnimationFrame(function() {
        element.focus({
            preventScroll: preventScroll
        });
    });
}

export {
    ensureFocus,
    getAllFocusableIn,
    getAllTabbableIn,
    getClosestFocusable,
    getFirstFocusableIn,
    getFirstTabbableIn,
    getLastTabbableIn,
    getNextTabbableIn,
    getPreviousTabbableIn,
    isFocusable,
    isTabbable
};